// Code generated by protoc-gen-struct-transformer, version: <dev>. DO NOT EDIT.
// source file: team.proto
// source package: team

package transform

import (
	"github.com/lalaland/backend/internal/models"
	"github.com/lalaland/backend/pb"
)

// "google.api.CustomHttpPattern": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.DescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "validate.Int64Rules": target: "", Omitted: true, OneofDecl: ""
// "team.AddUsersToTeamResponse": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.EnumValueDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.UninterpretedOption": target: "", Omitted: true, OneofDecl: ""
// "validate.FloatRules": target: "", Omitted: true, OneofDecl: ""
// "validate.Fixed64Rules": target: "", Omitted: true, OneofDecl: ""
// "validate.BytesRules": target: "", Omitted: true, OneofDecl: ""
// "auth.ChangePasswordResponse": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.ServiceDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "validate.DurationRules": target: "", Omitted: true, OneofDecl: ""
// "auth.VerifyOTPResponse": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.MessageOptions": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.SourceCodeInfo": target: "", Omitted: true, OneofDecl: ""
// "validate.EnumRules": target: "", Omitted: true, OneofDecl: ""
// "team.GetTeamsResponse": target: "", Omitted: true, OneofDecl: ""
// "validate.UInt64Rules": target: "", Omitted: true, OneofDecl: ""
// "user.UpdateUserRequest": target: "", Omitted: true, OneofDecl: ""
// "team.CreateTeamResponse": target: "", Omitted: true, OneofDecl: ""
// "team.GetTeamByIDResponse": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.OneofOptions": target: "", Omitted: true, OneofDecl: ""
// "validate.Int32Rules": target: "", Omitted: true, OneofDecl: ""
// "validate.TimestampRules": target: "", Omitted: true, OneofDecl: ""
// "user.GetListResponse": target: "", Omitted: true, OneofDecl: ""
// "team.GetTeamByIDRequest": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.EnumValueOptions": target: "", Omitted: true, OneofDecl: ""
// "validate.Fixed32Rules": target: "", Omitted: true, OneofDecl: ""
// "validate.StringRules": target: "", Omitted: true, OneofDecl: ""
// "auth.ChangePasswordRequest": target: "", Omitted: true, OneofDecl: ""
// "google.api.HttpRule": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.EnumOptions": target: "", Omitted: true, OneofDecl: ""
// "validate.SInt64Rules": target: "", Omitted: true, OneofDecl: ""
// "validate.SFixed32Rules": target: "", Omitted: true, OneofDecl: ""
// "auth.LoginRequest": target: "", Omitted: true, OneofDecl: ""
// "validate.DoubleRules": target: "", Omitted: true, OneofDecl: ""
// "auth.ForgotPasswordRequest": target: "", Omitted: true, OneofDecl: ""
// "user.CreateUserRequest": target: "", Omitted: true, OneofDecl: ""
// "team.Team": target: "Team", Omitted: false, OneofDecl: ""
// "auth.ResetPasswordResponse": target: "", Omitted: true, OneofDecl: ""
// "team.UpdateTeamResponse": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.ExtensionRangeOptions": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.FieldDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.GeneratedCodeInfo": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.Timestamp": target: "", Omitted: true, OneofDecl: ""
// "validate.SInt32Rules": target: "", Omitted: true, OneofDecl: ""
// "auth.LoginResponse": target: "", Omitted: true, OneofDecl: ""
// "team.GetTeamsRequest": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.FileDescriptorSet": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.MethodOptions": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.Duration": target: "", Omitted: true, OneofDecl: ""
// "validate.FieldRules": target: "", Omitted: true, OneofDecl: ""
// "validate.MessageRules": target: "", Omitted: true, OneofDecl: ""
// "validate.AnyRules": target: "", Omitted: true, OneofDecl: ""
// "team.UpdateTeamRequest": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.FileOptions": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.ServiceOptions": target: "", Omitted: true, OneofDecl: ""
// "validate.UInt32Rules": target: "", Omitted: true, OneofDecl: ""
// "auth.VerifyOTPRequest": target: "", Omitted: true, OneofDecl: ""
// "auth.ResetPasswordRequest": target: "", Omitted: true, OneofDecl: ""
// "user.CreateUserResponse": target: "", Omitted: true, OneofDecl: ""
// "team.CreateTeamRequest": target: "", Omitted: true, OneofDecl: ""
// "team.AddUsersToTeamRequest": target: "", Omitted: true, OneofDecl: ""
// "google.api.Http": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.FileDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.OneofDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "validate.MapRules": target: "", Omitted: true, OneofDecl: ""
// "user.GetUserByIDRequest": target: "", Omitted: true, OneofDecl: ""
// "user.GetListRequest": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.FieldOptions": target: "", Omitted: true, OneofDecl: ""
// "validate.SFixed64Rules": target: "", Omitted: true, OneofDecl: ""
// "validate.BoolRules": target: "", Omitted: true, OneofDecl: ""
// "validate.RepeatedRules": target: "", Omitted: true, OneofDecl: ""
// "user.User": target: "User", Omitted: false, OneofDecl: ""
// "google.protobuf.EnumDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "google.protobuf.MethodDescriptorProto": target: "", Omitted: true, OneofDecl: ""
// "auth.ForgotPasswordResponse": target: "", Omitted: true, OneofDecl: ""
// "user.UpdateUserResponse": target: "", Omitted: true, OneofDecl: ""
// message "CreateTeamRequest" has no option "transformer.go_struct", skipped...
// message "CreateTeamResponse" has no option "transformer.go_struct", skipped...
// message "AddUsersToTeamRequest" has no option "transformer.go_struct", skipped...
// message "AddUsersToTeamResponse" has no option "transformer.go_struct", skipped...

// Target struct fields:
// Field: "ID", Type: "primitive.ObjectID", isPointer: false
// Field: "Name", Type: "string", isPointer: false
// Field: "Description", Type: "string", isPointer: false
// Field: "DataIDs", Type: "ObjectID", isPointer: false
// Field: "CreatedBy", Type: "primitive.ObjectID", isPointer: false
// Field: "UpdatedAt", Type: "time.Time", isPointer: false
// Field: "DeletedAt", Type: "time.Time", isPointer: false
// Field: "UserIDs", Type: "ObjectID", isPointer: false
// Field: "ProjectID", Type: "primitive.ObjectID", isPointer: false
// Field: "CreatedAt", Type: "time.Time", isPointer: false

// ===============================
// fdp.Name: "name", mapAs: "", mapTo: ""
// sf: source.FieldInfo{Type:"String", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "Name", gname: "Name"

// ===============================
// fdp.Name: "description", mapAs: "", mapTo: ""
// sf: source.FieldInfo{Type:"String", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "Description", gname: "Description"

// ===============================
// fdp.Options: &descriptor.FieldOptions{XXX_InternalExtensions: proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{5303: proto.NewExtension([]byte{0xba, 0xcb, 0x2, 0x7, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73})}),}

// fdp.Name: "user_ids", mapAs: "", mapTo: "UserIDs"
// sf: source.FieldInfo{Type:"ObjectID", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "UserIds", gname: "UserIDs"

// ===============================
// fdp.Options: &descriptor.FieldOptions{XXX_InternalExtensions: proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{5303: proto.NewExtension([]byte{0xba, 0xcb, 0x2, 0x7, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73})}),}

// fdp.Name: "data_ids", mapAs: "", mapTo: "DataIDs"
// sf: source.FieldInfo{Type:"ObjectID", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "DataIds", gname: "DataIDs"

// ===============================
// fdp.Options: &descriptor.FieldOptions{XXX_InternalExtensions: proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{5303: proto.NewExtension([]byte{0xba, 0xcb, 0x2, 0x9, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44})}),}

// fdp.Name: "project_id", mapAs: "", mapTo: "ProjectID"
// sf: source.FieldInfo{Type:"PrimitiveObjectID", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "ProjectId", gname: "ProjectID"

// ===============================
// fdp.Name: "id", mapAs: "", mapTo: ""
// sf: source.FieldInfo{Type:"PrimitiveObjectID", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "Id", gname: "ID"

// ===============================
// fdp.Name: "created_at", mapAs: "", mapTo: ""
// sf: source.FieldInfo{Type:"TimeTime", IsPointer:false}, pbType: "", goType: "string", ft: "TYPE_STRING", pname: "CreatedAt", gname: "CreatedAt"
// message "GetTeamsRequest" has no option "transformer.go_struct", skipped...
// message "GetTeamsResponse" has no option "transformer.go_struct", skipped...
// message "GetTeamByIDRequest" has no option "transformer.go_struct", skipped...
// message "GetTeamByIDResponse" has no option "transformer.go_struct", skipped...
// message "UpdateTeamRequest" has no option "transformer.go_struct", skipped...
// message "UpdateTeamResponse" has no option "transformer.go_struct", skipped...
func PbToTeamPtr(src *pb.Team, opts ...TransformParam) *models.Team {
	if src == nil {
		return nil
	}

	d := PbToTeam(*src, opts...)
	return &d
}

func PbToTeamPtrList(src []*pb.Team, opts ...TransformParam) []*models.Team {
	resp := make([]*models.Team, len(src))

	for i, s := range src {
		resp[i] = PbToTeamPtr(s, opts...)
	}

	return resp
}

func PbToTeamPtrVal(src *pb.Team, opts ...TransformParam) models.Team {
	if src == nil {
		return models.Team{}
	}

	return PbToTeam(*src, opts...)
}

func PbToTeamPtrValList(src []*pb.Team, opts ...TransformParam) []models.Team {
	resp := make([]models.Team, len(src))

	for i, s := range src {
		resp[i] = PbToTeam(*s)
	}

	return resp
}

// PbToTeamList is DEPRECATED. Use PbToTeamPtrValList instead.
func PbToTeamList(src []*pb.Team, opts ...TransformParam) []models.Team {
	return PbToTeamPtrValList(src)
}

func PbToTeam(src pb.Team, opts ...TransformParam) models.Team {
	s := models.Team{
		Name:        src.Name,
		Description: src.Description,
		UserIDs:     StringToObjectID(src.UserIds),
		DataIDs:     StringToObjectID(src.DataIds),
		ProjectID:   StringToPrimitiveObjectID(src.ProjectId),
		ID:          StringToPrimitiveObjectID(src.Id),
		CreatedAt:   StringToTimeTime(src.CreatedAt),
	}

	applyOptions(opts...)

	return s
}

func PbToTeamValPtr(src pb.Team, opts ...TransformParam) *models.Team {
	d := PbToTeam(src, opts...)
	return &d
}

func PbToTeamValList(src []pb.Team, opts ...TransformParam) []models.Team {
	resp := make([]models.Team, len(src))

	for i, s := range src {
		resp[i] = PbToTeam(s, opts...)
	}

	return resp
}

func TeamToPbPtr(src *models.Team, opts ...TransformParam) *pb.Team {
	if src == nil {
		return nil
	}

	d := TeamToPb(*src, opts...)
	return &d
}

func TeamToPbPtrList(src []*models.Team, opts ...TransformParam) []*pb.Team {
	resp := make([]*pb.Team, len(src))

	for i, s := range src {
		resp[i] = TeamToPbPtr(s, opts...)
	}

	return resp
}

func TeamToPbPtrVal(src *models.Team, opts ...TransformParam) pb.Team {
	if src == nil {
		return pb.Team{}
	}

	return TeamToPb(*src, opts...)
}

func TeamToPbValPtrList(src []models.Team, opts ...TransformParam) []*pb.Team {
	resp := make([]*pb.Team, len(src))

	for i, s := range src {
		g := TeamToPb(s, opts...)
		resp[i] = &g
	}

	return resp
}

// TeamToPbList is DEPRECATED. Use TeamToPbValPtrList instead.
func TeamToPbList(src []models.Team, opts ...TransformParam) []*pb.Team {
	return TeamToPbValPtrList(src)
}

func TeamToPb(src models.Team, opts ...TransformParam) pb.Team {
	s := pb.Team{
		Name:        src.Name,
		Description: src.Description,
		UserIds:     ObjectIDToString(src.UserIDs),
		DataIds:     ObjectIDToString(src.DataIDs),
		ProjectId:   PrimitiveObjectIDToString(src.ProjectID),
		Id:          PrimitiveObjectIDToString(src.ID),
		CreatedAt:   TimeTimeToString(src.CreatedAt),
	}

	applyOptions(opts...)

	return s
}

func TeamToPbValPtr(src models.Team, opts ...TransformParam) *pb.Team {
	d := TeamToPb(src, opts...)
	return &d
}

func TeamToPbValList(src []models.Team, opts ...TransformParam) []pb.Team {
	resp := make([]pb.Team, len(src))

	for i, s := range src {
		resp[i] = TeamToPb(s, opts...)
	}

	return resp
}
