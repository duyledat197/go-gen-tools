// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: nrpc.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Message

	// no validation rules for MsgCount

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on Void with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Void) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Void with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VoidMultiError, or nil if none found.
func (m *Void) ValidateAll() error {
	return m.validate(true)
}

func (m *Void) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VoidMultiError(errors)
	}

	return nil
}

// VoidMultiError is an error wrapping multiple validation errors returned by
// Void.ValidateAll() if the designated constraints aren't met.
type VoidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoidMultiError) AllErrors() []error { return m }

// VoidValidationError is the validation error returned by Void.Validate if the
// designated constraints aren't met.
type VoidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidValidationError) ErrorName() string { return "VoidValidationError" }

// Error satisfies the builtin error interface
func (e VoidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidValidationError{}

// Validate checks the field values on NoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NoRequestMultiError, or nil
// if none found.
func (m *NoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NoRequestMultiError(errors)
	}

	return nil
}

// NoRequestMultiError is an error wrapping multiple validation errors returned
// by NoRequest.ValidateAll() if the designated constraints aren't met.
type NoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoRequestMultiError) AllErrors() []error { return m }

// NoRequestValidationError is the validation error returned by
// NoRequest.Validate if the designated constraints aren't met.
type NoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoRequestValidationError) ErrorName() string { return "NoRequestValidationError" }

// Error satisfies the builtin error interface
func (e NoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoRequestValidationError{}

// Validate checks the field values on NoReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NoReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NoReplyMultiError, or nil if none found.
func (m *NoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NoReplyMultiError(errors)
	}

	return nil
}

// NoReplyMultiError is an error wrapping multiple validation errors returned
// by NoReply.ValidateAll() if the designated constraints aren't met.
type NoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NoReplyMultiError) AllErrors() []error { return m }

// NoReplyValidationError is the validation error returned by NoReply.Validate
// if the designated constraints aren't met.
type NoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoReplyValidationError) ErrorName() string { return "NoReplyValidationError" }

// Error satisfies the builtin error interface
func (e NoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoReplyValidationError{}

// Validate checks the field values on HeartBeat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeartBeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartBeat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeartBeatMultiError, or nil
// if none found.
func (m *HeartBeat) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartBeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lastbeat

	if len(errors) > 0 {
		return HeartBeatMultiError(errors)
	}

	return nil
}

// HeartBeatMultiError is an error wrapping multiple validation errors returned
// by HeartBeat.ValidateAll() if the designated constraints aren't met.
type HeartBeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartBeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartBeatMultiError) AllErrors() []error { return m }

// HeartBeatValidationError is the validation error returned by
// HeartBeat.Validate if the designated constraints aren't met.
type HeartBeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartBeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartBeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartBeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartBeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartBeatValidationError) ErrorName() string { return "HeartBeatValidationError" }

// Error satisfies the builtin error interface
func (e HeartBeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartBeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartBeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartBeatValidationError{}
