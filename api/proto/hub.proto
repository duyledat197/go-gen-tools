syntax = "proto3";

package hub;
option go_package = "pb/;pb";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "enum.proto";
import "options/annotations.proto";

// // Go package name which contains business logic structures.
option (transformer.go_repo_package) = "models";
// // Go package name with protobuf generated srtuctures. Could be equal to
// // options go_package.
option (transformer.go_protobuf_package) = "pb";
// // Path to source file with Go structures which will be used asdestination.
option (transformer.go_models_file_path) = "internal/models/models.go";

service HubService {
  rpc GetHubByID(GetHubByIDRequest) returns (GetHubByIDResponse) {
    option (google.api.http) = {
      get : "/v1/hubs/{hubID}"
    };
  };

  rpc CreateHub(CreateHubRequest) returns (CreateHubResponse) {
    option (google.api.http) = {
      post : "/v1/hubs",
      body : "*"
    };
  };

  rpc GetList(GetListHubRequest) returns (GetListHubResponse) {
    option (google.api.http) = {
      get : "/v1/hubs"
    };
  };

  rpc UpdateHub(UpdateHubRequest) returns (UpdateHubResponse) {
    option (google.api.http) = {
      put : "/v1/hubs",
      body : "*"
    };
  };
}

message GetHubByIDRequest { string hubID = 1; }

message GetHubByIDResponse { Hub data = 1; }

message Hub {
  option (transformer.go_struct) = "Hub";
  string id = 1;
  string name = 2;
  string location_id = 3;
}

message CreateHubRequest {
  Hub hub = 1;
}

message CreateHubResponse { bool success = 1; }

message GetListHubRequest {
  int32 offset = 1;
  int32 limit = 2;
}

message GetListHubResponse {
  repeated Hub data = 1;
  int32 total = 2;
}

message UpdateHubRequest { Hub hub = 1; }

message UpdateHubResponse { bool success = 1; }