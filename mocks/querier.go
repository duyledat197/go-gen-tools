// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/duyledat197/interview-hao/internal/models"
	mock "github.com/stretchr/testify/mock"

	pgtype "github.com/jackc/pgtype"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateUser(ctx context.Context, arg models.CreateUserParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateUserParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteUser(ctx context.Context, id pgtype.Text) (*models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: ctx, id
func (_m *Querier) FindUserByID(ctx context.Context, id pgtype.Text) (*models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Text) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Text) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunction provides a mock function with given fields: ctx
func (_m *Querier) GetFunction(ctx context.Context) ([]*models.GetFunctionRow, error) {
	ret := _m.Called(ctx)

	var r0 []*models.GetFunctionRow
	if rf, ok := ret.Get(0).(func(context.Context) []*models.GetFunctionRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.GetFunctionRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListUser provides a mock function with given fields: ctx, arg
func (_m *Querier) GetListUser(ctx context.Context, arg models.GetListUserParams) ([]*models.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.GetListUserParams) []*models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.GetListUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateUser(ctx context.Context, arg models.UpdateUserParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateUserParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.UpdateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuerier interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerier(t mockConstructorTestingTNewQuerier) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
